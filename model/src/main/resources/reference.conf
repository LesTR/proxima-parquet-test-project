kafka{
  brokers: "kafka-0.kafka.parquet-test.svc.cluster.local:9093"
  brokers: ${?KAFKA}
}
s3 {
  host: "minio-1612951090.minio.svc.cluster.local:9000"
  access-key: "myaccesskey"
  secret-key: "mysecretkey"
  log-roll-interval: 60000
  allowed-lateness-ms: 1
  buckets {
    blob-user-batch: "blob-test-bucket"
    parquet-user-batch: "parquet-test-bucket"
  }
}
entities {
  user {
    attributes {
      "location.*" {
        scheme: "proto:cz.o2.proxima.parquet.model.proto.Location.LocationSpec"
      }
      note { scheme: string }
    }
  }
}
# Storages
attributeFamilies {
  user-commit-log {
    entity: user
    attributes: ["*"]
    storage: "kafka://"${kafka.brokers}"/users-commitlog"
    type: primary
    access: "commit-log"
  }
  user-batch-blob {
    entity: user
    attributes: ["*"]
    storage: "s3://"${s3.buckets.blob-user-batch}
    type: replica
    access: "batch-updates,batch-snapshot"
    access-key: ${s3.access-key}
    secret-key: ${s3.secret-key}
    ssl-enabled: false
    endpoint: "http://"${s3.host}
    path-style-access: true
    log-roll-interval: ${s3.log-roll-interval}
    allowed-lateness-ms: ${s3.allowed-lateness-ms}
  }
  user-batch-parquet {
    entity: user
    attributes: ["*"]
    storage: "s3://"${s3.buckets.parquet-user-batch}
    type: replica
    access: "batch-updates,batch-snapshot"
    access-key: ${s3.access-key}
    secret-key: ${s3.secret-key}
    ssl-enabled: false
    endpoint: "http://"${s3.host}
    path-style-access: true
    format: "parquet"
    gzip: true
    log-roll-interval: ${s3.log-roll-interval}
    allowed-lateness-ms: ${s3.allowed-lateness-ms}
  }
}